<?php
namespace UmutPHP\WPVulnerabilityCheck;
/**
 * Abstract class for output generation
 */
class Output
{
    /** @var int */
    public $pluginsPerLine = 50;

    /** @var int */
    protected $checkedPlugins;

    /** @var int */
    protected $totalPluginCount;

    /** @var Writer\Writer */
    protected $writer;

    /**
     * @param Writer\Writer $writer
     */
    public function __construct(Writer\Writer $writer = null)
    {
        $this->writer = $writer ?: new Writer\Readable;
    }

    public function ok()
    {
        $this->writer->write('.');
        $this->progress();
    }

    public function error()
    {
        $this->writer->write('V');
        $this->progress();
    }

    public function fail()
    {
        $this->writer->write('-');
        $this->progress();
    }

    /**
     * @param string|null $line
     */
    public function writeLine($line = null)
    {
        $this->writer->write($line . PHP_EOL);
    }

    /**
     * @param int $count
     */
    public function writeNewLine($count = 1)
    {
        $this->writer->write(str_repeat(PHP_EOL, $count));
    }

    /**
     * @param int $count
     */
    public function setTotalPluginCount($count)
    {
        $this->totalPluginCount = $count;
    }

    /**
     * @param string $plugin
     * @param array $result
     * @param bool $withCodeSnippet
     */
    public function writeResult(string $plugin, array $result)
    {
        $this->writeLine($plugin);
        $j = 1;
        foreach ($result as $key => $vuln) {
            $this->writeLine(
                "\t" . $j . ") id: " . $vuln["id"] . ", " .  $vuln["title"]
            );
            $this->writeLine(
                "\t" . "Fixed in Version " . $vuln["fixed_in"]
            );
            $this->writeLine(
                "\tReferences: " . implode(", ", $vuln["references"]["url"])
            );
            $j++;
            $this->writeNewLine();
        }
    }

    protected function progress()
    {
        if (++$this->checkedPlugins % $this->pluginsPerLine === 0) {
            if ($this->totalPluginCount != 0) { // !=
                $percent = round($this->checkedPlugins / $this->totalPluginCount * 100);
                $current = $this->stringWidth($this->checkedPlugins, strlen($this->totalPluginCount));
                $this->writeLine(" $current/$this->totalPluginCount ($percent %)");
            }
        }
    }

    /**
     * @param string $input
     * @param int $width
     * @return string
     */
    protected function stringWidth($input, $width = 3)
    {
        $multiplier = $width - strlen($input);
        return str_repeat(' ', $multiplier > 0 ? $multiplier : 0) . $input;
    }
}
