<?php
namespace UmutPHP\WPVulnerabilityCheck;

class Manager
{
    CONST WPVULNDB_V3_URL = 'https://wpvulndb.com/api/v3/';
    /**
     * @param Settings $settings
     * @return bool
     * @throws Exception\NotExistsPath
     */
    public function check(Settings $settings)
    {
        $plugins = $this->getFilesFromPaths($settings->path, $settings->excluded);

        /** @var Result[] $results */
        $results           = array();
        $startTime         = microtime(true);
        $checkedPlugins    = 0;
        $vulnerablePlugins = 0;
        $results           = array();

        foreach ($plugins as $plugin) {
            try {
                $fileResult = $this->checkPlugin($plugin);
                $checkedPlugins++;

                // Get Vulnerabilities and check the plugin with version
                $vulnerablePlugins++;
                echo "v"; // For vulnerability
                echo "."; // For success
                $pluginResult = array('Vulnerability Result');
                $results      = array_merge($results, $pluginResult);
            } catch (Exception\Exception $e) {
                echo "f"; // Fail
                $pluginResult = array($e->getMessage());
                $results      = array_merge($results, $pluginResult);
            }
        }

        $runTime = round(microtime(true) - $startTime, 1);

        echo PHP_EOL . PHP_EOL;

        $message = "Checked $checkedPlugins plugins in $runTime second, ";
        if ($vulnerablePlugins === 0) {
            $message .= "no vulnerability found.";
        } else {
            $message .= "some vulnerability(s) in $vulnerablePlugins ";
            $message .= ($vulnerablePlugins === 1 ? 'file' : 'files');
        }

        echo $message . PHP_EOL;

        if (!empty($results)) {
            $output->writeNewLine();

            foreach ($results as $result) {
                echo str_repeat('-', 60);
                echo $result[0];
                echo PHP_EOL;
            }

            return false;
        }

        return true;
    }

    /**
     * Check plugin with plugin name via API
     *
     * @param string $pluginName
     * @param Settings $settings
     * @return Result[]
     * @throws Exception
     */
    public function checkPlugin($pluginName, Settings $settings = null)
    {
        if ($settings === null) {
            $settings = new Settings();
        }

        $results = array();

        return $results;
    }

    /**
     * Private function to get the result from the API
     *
     * @param string $pluginName
     * @param string $APIToken
     * @return array Array decoded from JSON string
     */
    private function get($pluginName, $APIToken) {
        $ch  = curl_init();
        $url = self::WPVULNDB_V3_URL . 'plugins/' . $pluginName;

        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

        $headers = array(
            'Authorization: Token token=' . $APIToken
        );

        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $server_output = curl_exec ($ch);

        curl_close ($ch);

        return json_decode($server_output);
    }
}
